import tripy
import numpy as np
from tqdm import tqdm
import math
from smallestenclosingcircle import make_circle

def triangle_area(t):
    """Compute the area of a triangle."""
    A, B, C = t[0], t[1], t[2]
    return abs(0.5 * (((B[0] - A[0]) * (C[1] - A[1])) - ((C[0] - A[0]) * (B[1] - A[1]))))

def point_from_triangle(t):
    """Sample a point from a triangle."""
    A, B, C = t[0], t[1], t[2]
    x = np.random.uniform(0, 1)
    y = np.random.uniform(0, 1)
    p = ( A[0] + x * (B[0] - A[0]) + y * (C[0] - A[0]), A[1] + x * (B[1] - A[1]) + y * (C[1] - A[1]) )

    area = triangle_area(t)
    a1 = triangle_area([A, B, p])
    a2 = triangle_area([A, C, p])
    a3 = triangle_area([B, C, p])
    if round(a1 + a2 + a3, 6) == round(area, 6):
        return p
    else:    
        return ( A[0] + A[0] + (B[0] - A[0]) + (C[0] - A[0]) - p[0], A[1] + A[1] + (B[1] - A[1]) + (C[1] - A[1]) - p[1] )

def sq_euclid_dist(p1, p2):
    return (p1[0] - p2[0])**2 + (p1[1] - p2[1])**2

def euclid_dist(p1, p2):
    return math.sqrt(sq_euclid_dist(p1, p2))

def points_to_circle(p1, p2, p3):
    """Compute centre and radius of circle of two points."""
    temp = p2[0] * p2[0] + p2[1] * p2[1]
    bc = (p1[0] * p1[0] + p1[1] * p1[1] - temp) / 2
    cd = (temp - p3[0] * p3[0] - p3[1] * p3[1]) / 2
    det = (p1[0] - p2[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p2[1])

    if abs(det) < 1.0e-6:
        return (None, np.inf)

    # Center of circle
    cx = (bc*(p2[1] - p3[1]) - cd*(p1[1] - p2[1])) / det
    cy = ((p1[0] - p2[0]) * cd - (p2[0] - p3[0]) * bc) / det

    radius = np.sqrt((cx - p1[0])**2 + (cy - p1[1])**2)
    return ((cx, cy), radius)

def in_circle(center, radius, p):
    """True if point lies in circle defined by center and radius."""
    return math.sqrt((center[0] - p[0])**2 + (center[1] - p[1])**2) <= radius

def triangulate_polygon(p):
    """Triangulates a polygon."""
    triangles = tripy.earclip(p)
    return triangles

def sample_polygon(p, n=50):
    """Samples a polygon."""
    triangulation = triangulate_polygon(p)
    polygon_size = sum([triangle_area(t) for t in triangulation])
    triangulation = [(t, triangle_area(t) / polygon_size) for t in triangulation]

    triangulation[0] = triangulation[0][0], triangulation[0][1], 0
    for i in range(1, len(triangulation)):
        triangulation[i] = (triangulation[i][0], triangulation[i][1] + triangulation[i-1][1], triangulation[i-1][1])

    samples = np.random.uniform(0, 1, n)
    points = []
    for s in samples:
        for t, ma, mi in triangulation:
            if mi <= s <= ma:
                p = point_from_triangle(t)
                points.append(p)

    return points

def sample_shape(s, n=50):
    """Samples a shape that consists of multiple polygons."""
    triangulation = []
    for polygon in s:
        tri = triangulate_polygon(polygon)
        for triangle in tri:
            triangulation.append(triangle)
    polygon_size = sum([triangle_area(t) for t in triangulation])
    triangulation = [(t, triangle_area(t) / polygon_size) for t in triangulation]

    triangulation[0] = triangulation[0][0], triangulation[0][1], 0
    for i in range(1, len(triangulation)):
        triangulation[i] = (triangulation[i][0], triangulation[i][1] + triangulation[i-1][1], triangulation[i-1][1])

    samples = np.random.uniform(0, 1, n)
    points = []
    for s in samples:
        for t, ma, mi in triangulation:
            if mi <= s <= ma:
                p = point_from_triangle(t)
                points.append(p)

    return points

def smallest_k_disc(point_sets):
    all_points = [p for point_set in point_sets for p in point_set]
    constraints = [int(len(point_set) / 2) for point_set in point_sets]

    best = (None, None), math.inf
    print("Computing all discs with 2 points...")
    for i in tqdm(range(len(all_points))):
        for j in range(len(all_points)):
            if i == j:
                continue
            radius = math.sqrt(sq_euclid_dist(all_points[i], all_points[j])) / 2
            
            center = ((all_points[i][0] + all_points[j][0]) / 2, (all_points[i][1] + all_points[j][1]) / 2)
            
            if radius < best[1]:
                save = True
                for l in range(len(point_sets)):
                    if len([p for p in point_sets[l] if in_circle(center, radius, p)]) < constraints[l]:
                        save = False
                        break
                if save:
                    best = center, radius

    print("Smallest disc: ")
    print(best)
    print()

    print("Computing all discs with 3 points...")
    for i in tqdm(range(len(all_points))):
        for j in range(len(all_points)):
            if sq_euclid_dist(all_points[i], all_points[j]) >= best[1]**2:
                continue
            for k in range(len(all_points)):
                if i != j and j != k:
                    center, radius = points_to_circle(all_points[i], all_points[j], all_points[k])
                    if radius < best[1]:
                        save = True
                        for l in range(len(point_sets)):
                            if len([p for p in point_sets[l] if in_circle(center, radius, p)]) < constraints[l]:
                                save = False
                                break
                        if save:
                            best = center, radius

    print("Smallest disc: ")
    print(best)
    print()
    return best

def find_rp(r, p, point_sets, mapping):
    """Function returns the smallest disc that contains p on its boundary."""
    #print(f"Computing rp for {p}...")
    all_points = [q for point_set in point_sets for q in point_set]
    all_points = [q for q in all_points if q != p and euclid_dist(p, q) < 2 * r] # Compute I(p, r)
    c_depth = [0 for ps in point_sets]
    open_discs = [p]
    valid_configs = []

    constraints = [int(len(point_set) / 2) for point_set in point_sets]

    intersections = []

    c_depth[mapping[p]] += 1

    intersection_mapping = {}

    for q in all_points:
        midpoint = ((p[0] + q[0]) / 2), ((p[1] + q[1]) / 2)
        a = euclid_dist(p, q) / 2
        h = math.sqrt(r**2 - a**2)

        p1 = (midpoint[0] + h * ((q[1] - p[1]) / (2 * a)), midpoint[1] - h * ((q[0] - p[0]) / (2 * a)))
        p2 = (midpoint[0] - h * ((q[1] - p[1]) / (2 * a)), midpoint[1] + h * ((q[0] - p[0]) / (2 * a)))

        intersection_mapping[p1] = q
        intersection_mapping[p2] = q

        intersections.append(p1)
        intersections.append(p2)

        if abs((math.atan2(p1[1] - p[1], p1[0] - p[0]) + 2 * math.pi) % (2 * math.pi) - (math.atan2(p2[1] - p[1], p2[0] - p[0]) + 2 * math.pi) % (2 * math.pi)) > math.pi:
            open_discs.append(q)
            c_depth[mapping[q]] += 1

    intersections = sorted(intersections, key=lambda q: (math.atan2(q[1] - p[1], q[0] - p[0]) + 2 * math.pi) % (2 * math.pi))

    for i in range(0, len(intersections)):
        intersection = intersections[i]
        if intersection_mapping[intersection] in open_discs:
            c_depth[mapping[intersection_mapping[intersection]]] -= 1
            open_discs.remove(intersection_mapping[intersection])
        else:
            c_depth[mapping[intersection_mapping[intersection]]] += 1
            open_discs.append(intersection_mapping[intersection])

        if all([c_depth[i] >= constraints[i] for i in range(len(c_depth))]):
            valid_configs.append(list(open_discs))

    circles = [make_circle(v) for v in valid_configs] # O(n^2)
    if len(circles) == 0:
        min_disc = (0, 0, math.inf)
    else:
        min_disc = min(circles, key=lambda c: c[2])
        
    return min_disc


def smallest_k_disc_fast(point_sets): # O(n^3)
    print("Computing smallest disc using the fast algorithm...")
    all_points = [p for point_set in point_sets for p in point_set]
    c_depth = [0 for ps in point_sets]
    mapping = {}
    for i in range(len(point_sets)):
        for p in point_sets[i]:
            mapping[p] = i

    r = 100000000
    s = 0

    min_disc = (0, 0, math.inf)
    for p in tqdm(all_points):
        s += 1
        while (min_cand := find_rp(r, p, point_sets, mapping))[2] < r:
            s += 1
            r = min_cand[2]
            min_disc = min_cand

    print(s)
    print("Smallest disc: ")
    print(min_disc)
    print()

    return (min_disc[0], min_disc[1]), min_disc[2]
    


def shape_to_parts(polygon):
    polygons = []
    if len(polygon.parts) == 1:
        return [polygon.points]
    for i in range(1, len(polygon.parts)):
        start = polygon.parts[i - 1]
        end = polygon.parts[i]
        polygons.append(polygon.points[start:end])
    polygons.append(polygon.points[polygon.parts[-1]:])
    return polygons




point_sets = [[(4, 3), (0, 0)], [(-4, -1), (-2, 3), (-5, 2)]]
#a = smallest_k_disc_fast(point_sets)
#b = smallest_k_disc(point_sets)

#print(a, b)
#print(round(a[1], 6) == round(b[1], 6))

point_sets = [[(21.755193542738574, 79.53742041021444), (19.26161079012914, 79.39922078295761), (15.488215146733902, 78.98810347272328), (24.722594936927017, 80.26904894266268), (22.63869002433186, 80.14018154668288), (24.240630622344973, 79.62224086977339), (18.182045675361746, 78.38028915725381), (16.318440977464284, 79.05314999179654), (16.393734695939195, 78.3997686168347), (22.502035144063473, 77.75250295041276), (21.851653817824115, 78.25851367371202), (22.077149276148106, 78.10523469420181), (16.756472144235467, 78.21118888073215), (15.761106312045367, 77.74284360943005), (19.30464710901783, 80.25474771918833), (22.339661935597398, 80.42763020691766)], [(21.790274840693428, 69.83035650285653), (26.02459566835807, 70.85764212542693), (9.038747530153644, 60.35023635976642), (11.102143481024147, 60.36277890409955), (24.638794022825866, 69.10235622195432), (25.1717538106117, 69.79623491952533), (15.382711065466632, 67.27554801017949), (7.9119231216977495, 59.44458497396669), (22.361520637920346, 69.81079045596192), (7.710837469030989, 58.26930353431413), (7.241282621375808, 58.60857631043863), (12.848330567843124, 64.07911817680832), (18.7846895695892, 68.66752328703605), (17.985237746967687, 68.99753963690554), (10.377263447264196, 63.72702097437767), (10.320160062431878, 63.03445898787186)], [(17.937617273802868, 64.05901840294995), (13.547284080010517, 59.45119482725455), (14.7990949333706, 59.589877839691546), (16.103413007956412, 59.742878988648044), (13.14619347867206, 60.3031935377892), (13.83458593369961, 63.07337926747026), (20.336865142007987, 67.89706873513794), (21.54304003285927, 66.2095329383982), (15.249212847782651, 64.09565222123577), (16.007686979375862, 58.271085312063654), (18.32573310829898, 63.302245880711205), (14.887002148611039, 56.92371072294229), (14.942523345485982, 64.57687618694499), (15.683470495738225, 57.583500702191955), (20.396221873404514, 66.50949389619669), (21.5664969589321, 65.79210689484162)], [(11.161327977398704, 47.4048481424286), (16.827146040402, 48.165550598893276), (12.61318942610729, 47.41189932451803), (11.652116882969414, 47.27436400664272), (15.629193788398352, 47.283214720480444), (11.80486758434568, 47.05445871216919), (14.214130796638656, 47.631509428834505), (11.21102048137105, 47.394915037771725), (12.42968730918959, 46.94774891143399), (14.77605124571426, 48.153607605065794), (14.293533125134172, 47.51322015800337), (14.589014347074034, 48.579647399143326), (16.581362510376906, 48.280460804275066), (11.844603118197098, 47.532825837077255), (16.045084021036864, 47.004644100625576), (12.13373220895885, 47.59913977552647)], [(21.48044741783259, 56.09355345971748), (24.285579845645813, 56.170669197378814), (22.72589169252998, 56.029753749061484), (21.998615432070515, 55.34832898348315), (22.74346831042736, 56.28008237966084), (22.81811993600957, 54.98958367572426), (23.35530478931497, 55.2340561630421), (23.936720378938077, 55.67400476511412), (23.17759607024899, 54.6113521167161), (22.687910006372654, 56.09610664270766), (23.350571001024733, 54.21412702146765), (25.303339467578805, 55.77070354584157), (24.530638342843986, 56.31370395209955), (23.712438724996513, 55.03195911792241), (24.055833095745307, 55.0310015064755), (22.042474436982292, 55.6626072757071)], [(24.85737894647506, 56.83795356000711), (25.515750773458976, 57.57760733804854), (26.560472543512354, 55.70688408361683), (27.585196457442244, 56.20966199939051), (27.323727558360122, 56.56027659042758), (21.94096500294156, 57.10156118403817), (27.919697952106702, 56.396797001006135), (24.508033060862058, 57.46059103481866), (26.524424555960092, 56.7244979441427), (26.174798087216637, 56.27403464603342), (25.726761921261065, 57.19430436163889), (27.62263678394923, 56.56909460651751), (26.129060239255214, 56.60190974281648), (25.153012964951532, 57.34128686569313), (25.550772568640195, 57.17924649197681), (21.597154880183414, 57.283095630950235)], [(25.009622914880108, 58.93562711597456), (24.852898916586845, 57.971639944905405), (27.327780131568733, 58.94138624644251), (25.73269213333274, 57.91199487197727), (25.51187039415331, 58.32774611758993), (27.20542036520669, 57.72180758225683), (27.091566949648406, 58.20005952280032), (28.024522489764117, 59.283105993807574), (27.107478594489056, 57.755287453010794), (27.096566158995333, 57.5430848499617), (25.541397958005003, 58.48223495939102), (26.886149068658693, 58.39497206245151), (24.627374457001356, 58.370120999846534), (25.045695792394074, 58.79954445870393), (23.558592551545335, 59.11594416805247), (26.65285291560708, 58.79958904884818)], [(6.323537831455225, 51.57885737014233), (7.796882329279741, 49.97370086686221), (10.695411243254702, 48.097227540526966), (10.78118454277764, 51.77785210634086), (11.601720977727624, 49.19527678480057), (10.394948707904556, 52.780482316584845), (10.124752886266398, 53.795685501745346), (9.307497760950769, 52.61659438254608), (8.333136219807558, 52.98363679280803), (12.842849337723056, 51.58709704971156), (13.538953085294274, 52.988604525436955), (12.561168710449508, 53.40842315795841), (9.718959236380925, 47.98501653369125), (12.444263173514948, 50.41070522825483), (9.541662379699828, 53.235412525018496), (14.520931579819127, 52.00287867522166)], [(8.899507355444413, 47.50614390251595), (9.667462048382257, 46.61720923521004), (9.084352179707574, 46.89756792261999), (9.243765444733052, 46.516472923858785), (9.681192567620835, 46.39959312680449), (7.54394613830181, 46.85829629415541), (8.57567117133019, 47.68769839642344), (6.096252051567442, 46.58729423536007), (7.076132902092098, 47.33307666792419), (6.941985917453993, 46.75519528458678), (6.918790236226398, 47.46571519527833), (9.19180158623165, 46.54184496522341), (6.801414707693115, 46.535168412565234), (7.6619499884195985, 46.11795930629054), (7.247008730773228, 47.272001174055845), (8.742299787602063, 47.220524654954005)], [(6.040541470795199, 49.91173264296178), (5.803873680663821, 50.093153650234854), (6.094718423677288, 49.67990774026126), (5.853600875872627, 49.96548613981252), (6.2009906334893445, 49.82478482998032), (6.127929246255648, 49.80902985618941), (5.9135297108825355, 49.547533794791505), (5.981791584928126, 49.4701512524686), (6.178865132128464, 49.823485956828165), (6.095712607206482, 49.83585276097419), (5.992064630166813, 49.96090972767437), (6.108057931350847, 49.6528271087257), (6.222629002493075, 49.811110665605504), (6.1629938094225665, 49.80219485727613), (5.994331469545551, 49.92615191198944), (5.799263330910948, 49.865675615944)], [(5.540819774656451, 50.52646030697427), (5.155939942742419, 49.8419248413552), (5.067706352743071, 51.07624924016482), (4.112419790498252, 51.10323150751564), (3.725792737623511, 50.408497584839154), (4.382216942032157, 50.70222904370453), (5.46709664906956, 50.5042805492481), (4.840710749077186, 50.467249549063744), (5.597923029690755, 50.20957963272938), (4.387798204791796, 51.19716481150158), (3.973954141961422, 50.60068534616011), (3.0335242086142378, 50.810314251163305), (5.918736183173123, 50.48139989464666), (2.9733555432936245, 50.94739373666108), (5.470125824079675, 50.33679546324), (4.893131002651302, 51.10883753737023)], [(4.243582015267366, 52.164062865727246), (4.055791361401419, 51.843451679051796), (4.08685913330457, 51.46707623034158), (6.440970165233142, 52.37445114575821), (5.782366046182653, 52.801521543783174), (4.5849059561788925, 52.237942892896086), (5.768543035630078, 52.658722287212136), (6.064676056203036, 52.414317804241236), (5.637200929067034, 53.000986497942215), (4.552174487807139, 52.30148760604253), (6.8643463416844535, 52.8148400106816), (6.633131130947741, 52.94841049624787), (4.681314350453793, 51.870078690491326), (5.440219453963932, 51.53382952834902), (4.167653482000496, 51.48373823380941), (5.6300616352668795, 51.504779172677175)], [(-9.53062308489809, 52.21143035263501), (-7.841080202485665, 54.571819963570114), (-9.40799189428741, 52.142050634554515), (-8.20347246032649, 52.99386746477161), (-8.025132956400919, 53.81977053821672), (-8.842041053692817, 52.946754467664505), (-8.892348935868192, 52.74649889355158), (-6.2665580404271335, 53.7447358773336), (-8.554429237557448, 51.810211225827715), (-8.22263768733444, 53.72965447128004), (-6.407614897486566, 52.94707810842707), (-7.2701318743109, 53.41025134999935), (-8.51883159015413, 52.014882004832025), (-8.975800026327397, 53.12364830564076), (-7.677529095050584, 52.29356511883641), (-7.31390671338707, 53.61444360992977)], [(-0.45320853329543676, 46.65312817155879), (-0.42059233877524616, 47.620420280997635), (2.7337562132705044, 47.77199359308492), (3.2113177603010854, 50.651194045053586), (3.8584503341748206, 50.02191867781938), (-0.7463480259413453, 45.62402100395946), (1.2872595475420612, 43.90412221211039), (0.059398183946555605, 47.785270622513906), (-1.9653268886585984, 48.12296563838252), (1.6196288289095389, 44.00322426830631), (1.6439956779433347, 49.022572106207015), (3.962372268608176, 44.55018943266382), (6.119307303376235, 45.17751675966544), (2.886081498092816, 42.660388418128655), (7.0375769904503365, 47.80453503341738), (4.010627015843751, 48.15176914024094)], [(9.077812196245905, 54.919723052164116), (9.988325498086077, 55.95383474535534), (9.060954650776257, 56.338482797278765), (12.545389584997125, 55.60058628256765), (8.529506449244744, 56.175582585358214), (12.313342403496046, 56.03066440339744), (9.074360016511966, 55.766142883597), (9.965963335736655, 55.91292163296195), (9.310464839479916, 55.78464505230559), (11.20281630545542, 55.837520635497945), (9.254561166081285, 55.15310468733939), (9.128813753318148, 56.84773998187154), (12.379754852700176, 55.806047672075806), (10.313639800285275, 56.96432099374455), (11.581185439887824, 55.868020893962395), (8.5995166209478, 56.688541372132384)], [(-6.091500745779909, 54.70746262416154), (-7.290730306885084, 54.84962901780403), (-7.111087067587359, 54.74409472792513), (-7.435015088237811, 54.85489096279416), (-7.463025981777111, 55.034506621621894), (-6.850975330693911, 54.46094414099653), (-6.301690493762431, 54.29847739584918), (-6.851286411556673, 54.2961777698304), (-6.551474362385177, 54.418281081401844), (-6.941744793270685, 54.708498050222936), (-6.160281256456851, 54.31197162241035), (-7.526751569947266, 55.10730973089712), (-6.706082705005883, 54.7752386871797), (-6.392233216435903, 54.04295853749402), (-6.962614237269348, 54.71893996994018), (-6.0523704699813985, 54.45130680338914)], [(-2.9381833590761453, 52.766703820969454), (-4.015968515454136, 51.27548408276602), (-4.293440800584127, 50.887459436962914), (-1.232008264983279, 52.55977339455335), (-2.7426329426973854, 51.264014753654266), (0.6844229204393006, 52.58532815907085), (-1.4411984592522562, 52.60738430934598), (-1.1634341188435722, 53.7982688863513), (-0.9889667548680129, 53.600996429801484), (-1.7767497377569446, 55.341237465158855), (-3.3681530894575475, 54.39522973456018), (-1.4003666328104243, 53.695462380097055), (-2.433950100750236, 54.15000482326615), (-2.823168768457985, 53.26402320248185), (0.24443572603878316, 51.24024261487104), (-4.569055181570507, 50.58650461619966)], [(-21.358457250565984, 64.92216077607915), (-19.32069161247038, 63.86467168218764), (-21.843541270960465, 64.89423450660748), (-21.508881573438824, 65.56817080650852), (-14.112238275032894, 65.00901141302396), (-20.757276869369697, 64.1727449315934), (-19.18076068822783, 65.57421571695879), (-18.063122195154072, 64.72640342215854), (-22.691890163511054, 65.51925405142599), (-20.081848161807446, 65.87961468014585), (-23.135886826415284, 65.67174826405557), (-16.76966536511461, 66.05910793863258), (-16.506251625766417, 65.76813026016954), (-21.98185060451405, 64.5286233990042), (-20.835580509687794, 65.63108051848941), (-18.091182303562306, 64.17674199503315)], [(27.62801115996479, 61.053740868355135), (29.340983441373506, 66.32827263206524), (23.414250452883834, 62.51660806759549), (29.433578481063865, 63.85986013901464), (26.182989210277857, 63.61066437613938), (27.182269102362334, 64.20125070527196), (29.929461231645995, 65.79729010335268), (25.01862316516919, 63.42891468036165), (24.959255697832727, 61.47635058803735), (29.417712402952358, 66.49956324157424), (29.77269580374368, 66.15318508040767), (26.900357870381367, 69.50629680619598), (26.889829794685454, 69.5727736768098), (26.2957833126514, 66.26234760496021), (25.77866182622756, 62.45728600332065), (21.173413213739032, 62.555531163259744)], [(-4.89036666318559, 52.000188571913), (-3.582880536828444, 52.97227697965675), (-4.645223365211779, 51.95587112856575), (-4.22828245715805, 52.031227907385166), (-3.1141502181275014, 51.75979929023501), (-4.6639719702227085, 53.124284172543895), (-3.715869068358306, 52.05578133945127), (-4.016703955319281, 53.45734013112462), (-3.3120888749022326, 52.227533234621596), (-4.415769455416652, 53.34013265583064), (-4.2278194689352135, 53.00459392257636), (-4.162168122311568, 51.88779863799901), (-3.420199001258562, 52.19667247137179), (-3.8400317331687703, 53.41119307536806), (-3.230842063701581, 51.769193860960364), (-3.222295404984253, 52.45073275428906)], [(-4.287466029802062, 55.14897538189447), (-4.276053862541172, 56.77747709329701), (-3.8279865807919817, 55.97923748004525), (-2.4148542607160337, 57.19415828075565), (-3.161588461136818, 55.33817910851599), (-5.7784106972370175, 56.48093619730146), (-2.946719234615199, 55.19200097981576), (-5.488977981573225, 57.254314715258104), (-4.365829632764662, 55.38602036156646), (-4.065067910270994, 56.931054581391685), (-3.2264252629720893, 55.62233878409319), (-5.459599261587787, 57.169663957727195), (-3.3829627775710067, 55.22200906952056), (-2.8802129869238313, 56.83979280962411), (-2.7650564554866213, 55.3288994348444), (-4.97906640601643, 58.60173861114654)]]
#a = smallest_k_disc_fast(point_sets)
#b = smallest_k_disc(point_sets)

#print(a, b)
#print(round(a[1], 6) == round(b[1], 6))