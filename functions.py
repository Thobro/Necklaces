import tripy
import numpy as np
from tqdm import tqdm
import math
import random
from smallestenclosingcircle import make_circle

def triangle_area(t):
    """Compute the area of a triangle."""
    A, B, C = t[0], t[1], t[2]
    return abs(0.5 * (((B[0] - A[0]) * (C[1] - A[1])) - ((C[0] - A[0]) * (B[1] - A[1]))))

def point_from_triangle(t):
    """Sample a point from a triangle."""
    A, B, C = t[0], t[1], t[2]
    x = np.random.uniform(0, 1)
    y = np.random.uniform(0, 1)
    p = ( A[0] + x * (B[0] - A[0]) + y * (C[0] - A[0]), A[1] + x * (B[1] - A[1]) + y * (C[1] - A[1]) )

    area = triangle_area(t)
    a1 = triangle_area([A, B, p])
    a2 = triangle_area([A, C, p])
    a3 = triangle_area([B, C, p])
    if round(a1 + a2 + a3, 6) == round(area, 6):
        return p
    else:    
        return ( A[0] + A[0] + (B[0] - A[0]) + (C[0] - A[0]) - p[0], A[1] + A[1] + (B[1] - A[1]) + (C[1] - A[1]) - p[1] )

def sq_euclid_dist(p1, p2):
    return (p1[0] - p2[0])**2 + (p1[1] - p2[1])**2

def euclid_dist(p1, p2):
    return math.sqrt(sq_euclid_dist(p1, p2))

def points_to_circle(p1, p2, p3):
    """Compute centre and radius of circle of two points."""
    temp = p2[0] * p2[0] + p2[1] * p2[1]
    bc = (p1[0] * p1[0] + p1[1] * p1[1] - temp) / 2
    cd = (temp - p3[0] * p3[0] - p3[1] * p3[1]) / 2
    det = (p1[0] - p2[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p2[1])

    if abs(det) < 1.0e-6:
        return (None, np.inf)

    # Center of circle
    cx = (bc*(p2[1] - p3[1]) - cd*(p1[1] - p2[1])) / det
    cy = ((p1[0] - p2[0]) * cd - (p2[0] - p3[0]) * bc) / det

    radius = np.sqrt((cx - p1[0])**2 + (cy - p1[1])**2)
    return ((cx, cy), radius)

def in_circle(center, radius, p):
    """True if point lies in circle defined by center and radius."""
    return math.sqrt((center[0] - p[0])**2 + (center[1] - p[1])**2) <= radius

def triangulate_polygon(p):
    """Triangulates a polygon."""
    triangles = tripy.earclip(p)
    return triangles

def sample_polygon(p, n=50):
    """Samples a polygon."""
    triangulation = triangulate_polygon(p)
    polygon_size = sum([triangle_area(t) for t in triangulation])
    triangulation = [(t, triangle_area(t) / polygon_size) for t in triangulation]

    triangulation[0] = triangulation[0][0], triangulation[0][1], 0
    for i in range(1, len(triangulation)):
        triangulation[i] = (triangulation[i][0], triangulation[i][1] + triangulation[i-1][1], triangulation[i-1][1])

    samples = np.random.uniform(0, 1, n)
    points = []
    for s in samples:
        for t, ma, mi in triangulation:
            if mi <= s <= ma:
                p = point_from_triangle(t)
                points.append(p)

    return points

def sample_shape(s, n=50):
    """Samples a shape that consists of multiple polygons."""
    triangulation = []
    for polygon in s:
        tri = triangulate_polygon(polygon)
        for triangle in tri:
            triangulation.append(triangle)
    polygon_size = sum([triangle_area(t) for t in triangulation])
    triangulation = [(t, triangle_area(t) / polygon_size) for t in triangulation]

    triangulation[0] = triangulation[0][0], triangulation[0][1], 0
    for i in range(1, len(triangulation)):
        triangulation[i] = (triangulation[i][0], triangulation[i][1] + triangulation[i-1][1], triangulation[i-1][1])

    samples = np.random.uniform(0, 1, n)
    points = []
    for s in samples:
        for t, ma, mi in triangulation:
            if mi <= s <= ma:
                p = point_from_triangle(t)
                points.append(p)

    return points

def smallest_k_disc(point_sets):
    all_points = [p for point_set in point_sets for p in point_set]
    constraints = [int(len(point_set) / 2) for point_set in point_sets]

    best = (None, None), math.inf
    print("Computing all discs with 2 points...")
    for i in tqdm(range(len(all_points))):
        for j in range(len(all_points)):
            if i == j:
                continue
            radius = math.sqrt(sq_euclid_dist(all_points[i], all_points[j])) / 2
            
            center = ((all_points[i][0] + all_points[j][0]) / 2, (all_points[i][1] + all_points[j][1]) / 2)
            
            if radius < best[1]:
                save = True
                for l in range(len(point_sets)):
                    if len([p for p in point_sets[l] if in_circle(center, radius, p)]) < constraints[l]:
                        save = False
                        break
                if save:
                    best = center, radius

    print("Smallest disc: ")
    print(best)
    print()

    print("Computing all discs with 3 points...")
    for i in tqdm(range(len(all_points))):
        for j in range(len(all_points)):
            if sq_euclid_dist(all_points[i], all_points[j]) >= best[1]**2:
                continue
            for k in range(len(all_points)):
                if i != j and j != k:
                    center, radius = points_to_circle(all_points[i], all_points[j], all_points[k])
                    if radius < best[1]:
                        save = True
                        for l in range(len(point_sets)):
                            if len([p for p in point_sets[l] if in_circle(center, radius, p)]) < constraints[l]:
                                save = False
                                break
                        if save:
                            best = center, radius

    print("Smallest disc: ")
    print(best)
    print()
    return best

def test_rp_gt_r(r, p, point_sets, mapping):
    """Function returns the smallest disc that contains p on its boundary."""
    #print(f"Computing rp for {p}...")
    all_points = [q for point_set in point_sets for q in point_set]
    all_points = [q for q in all_points if q != p and euclid_dist(p, q) < 2 * r] # Compute I(p, r)
    c_depth = [0 for ps in point_sets]
    open_discs = [p]
    valid_configs = []

    constraints = [int(len(point_set) / 2) for point_set in point_sets]

    intersections = []

    c_depth[mapping[p]] += 1

    intersection_mapping = {}

    for q in all_points:
        midpoint = ((p[0] + q[0]) / 2), ((p[1] + q[1]) / 2)
        a = euclid_dist(p, q) / 2
        h = math.sqrt(r**2 - a**2)

        p1 = (midpoint[0] + h * ((q[1] - p[1]) / (2 * a)), midpoint[1] - h * ((q[0] - p[0]) / (2 * a)))
        p2 = (midpoint[0] - h * ((q[1] - p[1]) / (2 * a)), midpoint[1] + h * ((q[0] - p[0]) / (2 * a)))

        intersection_mapping[p1] = q
        intersection_mapping[p2] = q

        intersections.append(p1)
        intersections.append(p2)

        if abs((math.atan2(p1[1] - p[1], p1[0] - p[0]) + 2 * math.pi) % (2 * math.pi) - (math.atan2(p2[1] - p[1], p2[0] - p[0]) + 2 * math.pi) % (2 * math.pi)) > math.pi:
            open_discs.append(q)
            c_depth[mapping[q]] += 1

    intersections = sorted(intersections, key=lambda q: (math.atan2(q[1] - p[1], q[0] - p[0]) + 2 * math.pi) % (2 * math.pi))

    for i in range(0, len(intersections)):
        intersection = intersections[i]
        if intersection_mapping[intersection] in open_discs:
            c_depth[mapping[intersection_mapping[intersection]]] -= 1
            open_discs.remove(intersection_mapping[intersection])
        else:
            c_depth[mapping[intersection_mapping[intersection]]] += 1
            open_discs.append(intersection_mapping[intersection])

        if all([c_depth[i] >= constraints[i] for i in range(len(c_depth))]):
            valid_configs.append(list(open_discs))

    return len(valid_configs) == 0

def find_rp(r, p, point_sets, mapping):
    """Function returns the smallest disc that contains p on its boundary."""
    #print(f"Computing rp for {p}...")
    all_points = [q for point_set in point_sets for q in point_set]
    all_points = [q for q in all_points if q != p and euclid_dist(p, q) < 2 * r] # Compute I(p, r)
    c_depth = [0 for ps in point_sets]
    open_discs = [p]
    valid_configs = []

    constraints = [int(len(point_set) / 2) for point_set in point_sets]

    intersections = []

    c_depth[mapping[p]] += 1

    intersection_mapping = {}

    for q in all_points:
        midpoint = ((p[0] + q[0]) / 2), ((p[1] + q[1]) / 2)
        a = euclid_dist(p, q) / 2
        h = math.sqrt(r**2 - a**2)

        p1 = (midpoint[0] + h * ((q[1] - p[1]) / (2 * a)), midpoint[1] - h * ((q[0] - p[0]) / (2 * a)))
        p2 = (midpoint[0] - h * ((q[1] - p[1]) / (2 * a)), midpoint[1] + h * ((q[0] - p[0]) / (2 * a)))

        intersection_mapping[p1] = q
        intersection_mapping[p2] = q

        intersections.append(p1)
        intersections.append(p2)

        if abs((math.atan2(p1[1] - p[1], p1[0] - p[0]) + 2 * math.pi) % (2 * math.pi) - (math.atan2(p2[1] - p[1], p2[0] - p[0]) + 2 * math.pi) % (2 * math.pi)) > math.pi:
            open_discs.append(q)
            c_depth[mapping[q]] += 1

    intersections = sorted(intersections, key=lambda q: (math.atan2(q[1] - p[1], q[0] - p[0]) + 2 * math.pi) % (2 * math.pi))

    for i in range(0, len(intersections)):
        intersection = intersections[i]
        if intersection_mapping[intersection] in open_discs:
            c_depth[mapping[intersection_mapping[intersection]]] -= 1
            open_discs.remove(intersection_mapping[intersection])
        else:
            c_depth[mapping[intersection_mapping[intersection]]] += 1
            open_discs.append(intersection_mapping[intersection])

        if all([c_depth[i] >= constraints[i] for i in range(len(c_depth))]):
            valid_configs.append(list(open_discs))


    circles = [make_circle(v) for v in valid_configs] # O(n^2)
    if len(circles) == 0:
        min_disc = (0, 0, math.inf)
    else:
        min_disc = min(circles, key=lambda c: c[2])
        
    return min_disc


def smallest_k_disc_fast(point_sets): # O(n^3)
    print("Computing smallest disc using the fast algorithm...")
    all_points = [p for point_set in point_sets for p in point_set]
    c_depth = [0 for ps in point_sets]
    mapping = {}
    for i in range(len(point_sets)):
        for p in point_sets[i]:
            mapping[p] = i

    r = 100000000
    s = 0

    min_disc = (0, 0, math.inf)
    for p in tqdm(all_points):
        s += 1
        while (min_cand := find_rp(r, p, point_sets, mapping))[2] < r:
            s += 1
            r = min_cand[2]
            min_disc = min_cand

    print(s)
    print("Smallest disc: ")
    print(min_disc)
    print()

    return (min_disc[0], min_disc[1]), min_disc[2]


def smallest_k_disc_fast_randomised(point_sets): # O(n^3)
    print("Computing smallest disc using the fast algorithm...")
    all_points = [p for point_set in point_sets for p in point_set]
    c_depth = [0 for ps in point_sets]
    mapping = {}
    for i in range(len(point_sets)):
        for p in point_sets[i]:
            mapping[p] = i

    r = 100000000000
    s = 0

    
    candidates = [q for q in all_points if not test_rp_gt_r(r, q, point_sets, mapping)]
    #print(f"Number of candidates: {len(candidates)}")

    p = random.choice(candidates)
    #print(p)

    min_disc = (0, 0, math.inf)
    while (min_cand := find_rp(r, p, point_sets, mapping))[2] < r:
        r = min_cand[2]
        min_disc = min_cand
    
    #print(min_disc)
    candidates = [q for q in candidates if not test_rp_gt_r(min_disc[2] + 0.00001, q, point_sets, mapping)]
    #print(f"Number of candidates: {len(candidates)}")
    #print(candidates)
    #print(p in candidates)
    

    p = random.choice(candidates)
    #print(p)

    while (min_cand := find_rp(r, p, point_sets, mapping))[2] < r:
        r = min_cand[2]
        min_disc = min_cand
    
    #print(min_disc)
    candidates = [q for q in candidates if not test_rp_gt_r(min_disc[2] + 0.00001, q, point_sets, mapping)]
    #print(f"Number of candidates: {len(candidates)}")
    #print(candidates)
    #print(p in candidates)

    q = candidates[0]
    while (min_cand := find_rp(r, q, point_sets, mapping))[2] < r:
        r = min_cand[2]
        min_disc = min_cand

    print(min_disc)



    '''min_disc = (0, 0, math.inf)
    for p in tqdm(all_points):
        s += 1
        while (min_cand := find_rp(r, p, point_sets, mapping))[2] < r:
            s += 1
            r = min_cand[2]
            min_disc = min_cand

    print(s)
    print("Smallest disc: ")
    print(min_disc)
    print()

    return (min_disc[0], min_disc[1]), min_disc[2]'''
    

def shape_to_parts(polygon):
    polygons = []
    if len(polygon.parts) == 1:
        return [polygon.points]
    for i in range(1, len(polygon.parts)):
        start = polygon.parts[i - 1]
        end = polygon.parts[i]
        polygons.append(polygon.points[start:end])
    polygons.append(polygon.points[polygon.parts[-1]:])
    return polygons




point_sets = [[(4, 3), (0, 0)], [(-4, -1), (-2, 3), (-5, 2)]]
#a = smallest_k_disc_fast(point_sets)
#b = smallest_k_disc(point_sets)

#print(a, b)
#print(round(a[1], 6) == round(b[1], 6))

point_sets = [[(-95.42268723071197, 44.54527781711892), (-97.01916839729702, 48.85650074637359), (-95.75575656598916, 45.31095589222607), (-95.24588961742725, 48.01749455746888), (-90.42729576491233, 47.76430678299001), (-93.67041139407705, 46.85512041761367), (-94.43354605798609, 47.67123994018157), (-94.61591048094493, 48.64381067134835), (-95.03178299057697, 44.25497097195977), (-93.19551749830273, 46.24273029930682), (-93.39175710070636, 44.02335817486605), (-94.001822881236, 46.9142171641601)], [(-101.94505486499051, 46.250624895392015), (-101.44263039699474, 46.09869673096248), (-101.64683087245938, 48.88979308987387), (-97.59028230983537, 46.708235244349666), (-101.91188399871547, 46.6043479561624), (-103.40314765904671, 48.99983494209031), (-102.37164320213438, 47.26673859284278), (-98.5263341930214, 47.243741650188426), (-97.67667274427806, 46.83465513749432), (-102.00729857431423, 47.74219196315073), (-102.24669068051824, 48.77125717793431), (-101.38484483217891, 47.45182713418231)], [(-93.31576452913663, 41.389270734301824), (-94.84340352406332, 41.48002745541456), (-95.10365419210952, 42.10475114886374), (-92.95811921835477, 41.70036049662382), (-91.87250234007021, 41.25348106919738), (-91.68136946177934, 41.91040952000503), (-93.22575350170256, 42.04506462425922), (-92.54573731989426, 41.61330323158287), (-91.58968193712995, 40.51722728790967), (-94.69811079145934, 42.424084501804685), (-92.11555335577026, 41.24342678571638), (-92.3005799476549, 42.56070788239877)], [(-98.2384199181225, 38.61482507242319), (-99.21638078202484, 37.3709125905206), (-100.7248183022449, 39.71261378126966), (-95.132190497902, 38.731173794107036), (-101.4659149797189, 37.9697602334983), (-100.0451495032494, 38.74642953260803), (-96.71326773303662, 38.4809816050478), (-95.88834380304051, 37.91290873541892), (-96.31832622186836, 38.825765488522734), (-101.63321818423016, 39.33134329428079), (-99.42877249522763, 37.95937337388294), (-96.2291015102985, 37.977138240875256)], [(-90.84070260932845, 37.285144320464966), (-93.78794153769493, 36.89603588432494), (-93.09256708943686, 36.968719444582824), (-91.9460343370163, 39.42192819318521), (-94.33039218035786, 40.131063149749096), (-95.04848973610568, 39.94957763306781), (-94.3584192091736, 38.205302256168494), (-92.55651634731565, 38.74344522886368), (-94.13104274449285, 36.62905622908478), (-91.22068358751483, 36.52864157012074), (-92.97812547096267, 39.40591784618342), (-94.50131617495227, 38.10750420169637)], [(-101.56151992302549, 40.47699320949884), (-98.80327045063707, 41.86535416334076), (-100.24052902955403, 42.33584301494194), (-102.02703731792221, 41.323048400641675), (-98.65055173212573, 42.23062141651118), (-96.3612345476384, 40.356205559496644), (-100.20045648758628, 41.73609718168653), (-98.31963094504496, 40.43608417930875), (-99.33164639977245, 42.74605980856431), (-101.3542295772301, 41.73351152069475), (-97.92952992651271, 41.63672943426844), (-97.61711550410445, 42.5286667939244)], [(-102.79314734316038, 44.82868248831972), (-103.40992115096948, 43.583271474905644), (-96.97283304520941, 45.22820171019632), (-100.57906489466247, 45.456846013729574), (-102.98294664499326, 44.59252607813136), (-102.73139510897123, 44.95683944808327), (-98.05311636890742, 43.49225601449919), (-97.275268867281, 44.91903268291829), (-96.68153749772692, 44.898568441137485), (-100.00942304176407, 43.25164934395873), (-100.2393758788142, 45.48679837245192), (-98.14970651221421, 45.2386523026738)], [(-88.07444939445185, 39.69127369312301), (-88.41093227206034, 39.035984336057375), (-88.78392084769467, 38.0626162974727), (-88.72121151097764, 38.95344635842121), (-88.74939758120405, 40.53430473266938), (-90.18276831127407, 40.096273364641426), (-90.28963340413011, 39.29794422890049), (-91.10586481193381, 39.60331894921869), (-90.01530059244918, 40.58140283146233), (-89.03930869002464, 37.74240255468984), (-89.70270911368631, 41.63097749159315), (-88.3924280855975, 42.28589583107986)], [(-87.98951836247856, 37.817786481730806), (-87.16650985634566, 39.59331485848069), (-85.82649242754353, 39.01138169108903), (-87.36918626150292, 40.875412847089194), (-85.98430099671565, 38.891462487669926), (-87.44688740904871, 39.577780953178845), (-86.05267250071827, 38.683620211142824), (-85.35979930777762, 41.02029503789963), (-87.8412095327636, 38.22182964059515), (-86.34945724105258, 39.29296759956724), (-85.97908386062171, 40.658127991591684), (-87.35711072817855, 41.18200723033969)], [(-84.53362170825672, 40.93703813252689), (-82.17023102682568, 41.31990286094141), (-83.62986000182734, 39.2945297601402), (-82.46618534748652, 39.21132960277635), (-84.26107565072016, 40.018381021508695), (-84.82079051298918, 39.315619561062285), (-81.75330361140429, 40.887393142005465), (-80.78168379344395, 40.39066131839745), (-83.04196633482806, 39.697303244291035), (-83.49033448957228, 39.91995980097695), (-83.96737780433774, 39.72838229745111), (-82.01209466214165, 39.652590671061965)], [(-91.25458629729482, 43.61750962769318), (-90.9685517075656, 44.40965324784274), (-91.92134125774331, 45.035685027159545), (-90.64142913200558, 46.456773180739255), (-88.71922436533109, 44.48660153588758), (-88.63043894314332, 44.06507371686767), (-88.33289094466058, 44.592776970950915), (-89.32256887136894, 42.50916848886808), (-90.21381983561264, 45.21411800651192), (-89.7926947831958, 44.97593109739625), (-88.0708974881236, 42.70095701102587), (-90.72362344475292, 46.08651718420757)], [(-83.65255655232006, 42.47301765215045), (-84.81416199155282, 43.66103637028411), (-85.89328679818263, 43.13931991938724), (-85.04144631462555, 43.50881118013633), (-87.46626720921988, 46.592477217406795), (-85.09569922707936, 44.107556746742), (-84.45141949463955, 44.11029987818926), (-83.32183470328422, 42.30857839988167), (-85.24501566174122, 43.53408860739048), (-88.85522059037726, 46.457802298563905), (-86.29818045926105, 46.56787667224875), (-88.31671309071069, 46.80741803224644)], [(-115.33398603208728, 48.27814473915984), (-107.49080403599993, 48.60103682434241), (-106.43206573904729, 47.17946471869032), (-105.46140319356847, 45.169918872197904), (-114.21117861208698, 46.47567255878784), (-104.51527597532493, 47.10211469272595), (-109.01178683856921, 47.88406227161206), (-113.4487669641714, 48.07102964965966), (-110.37019970984312, 47.08721189276132), (-104.81098110640906, 48.48027796961113), (-111.78302093292427, 46.95398264216415), (-108.67598711538221, 46.81031690763876)], [(-111.89132964450366, 44.28169218175048), (-111.70072726521619, 44.149938037166216), (-112.58722259257105, 43.97350548780533), (-114.02190505018784, 43.035955485696675), (-115.79979532037898, 42.9680470338892), (-112.8863017994249, 44.33604667600402), (-115.9195340411549, 42.87379556998915), (-112.3476423539441, 43.04421497635972), (-115.36884751564068, 43.088849284766205), (-115.33873804040502, 42.956776111625494), (-113.29778340253877, 43.8448390238845), (-112.275721613592, 42.06880759818571)], [(-123.13589767643566, 47.829163551171284), (-121.36686225730567, 47.94727645207664), (-122.17045391556408, 48.34100431176803), (-120.95468561189723, 48.15165440849973), (-122.82823280588939, 46.53966475842376), (-120.9679658484377, 47.42104566906525), (-118.92559119654968, 47.319389603715905), (-118.35737593352383, 48.43465974916743), (-123.37320316057026, 47.23367944471595), (-122.33794672152338, 45.76900019963459), (-122.81792644505249, 47.23433446497498), (-120.94309763458125, 48.36897848875595)], [(-109.8814359759681, 34.97640756744277), (-111.55466149700281, 35.7976315672385), (-112.5738684626353, 33.76746901625532), (-110.29445833486007, 34.946841905359456), (-112.41760598423826, 33.51650157752749), (-112.93756033089826, 33.50475228511982), (-114.30222316153692, 35.008810985752646), (-113.32569992536308, 35.978139265545266), (-113.2901981678372, 34.113358195109726), (-109.6609495703227, 32.93923501798705), (-109.89212291841187, 36.9886149004861), (-112.80424361106982, 34.47193387990388)], [(-118.35435156186176, 36.65175899640106), (-117.32996724883311, 34.85078080854569), (-121.87356455498966, 37.49335908606872), (-119.25137619654342, 34.70501118781377), (-114.93928129598565, 33.66096509305895), (-121.74177469671126, 37.55204556297227), (-120.95336046731823, 40.86274191929652), (-121.9720895971184, 38.103242029697775), (-123.6543014935143, 39.27053276318592), (-121.35557514703005, 36.07587569542957), (-116.7473668309088, 33.25873031936763), (-121.49595646594727, 40.67171003160933)], [(-108.31888076704162, 38.51753097324973), (-107.40805564429462, 37.61201392478085), (-107.27186549226286, 39.5157529221757), (-105.26437285330283, 39.02044370250177), (-104.01509812239252, 40.68146197716589), (-105.1979095349348, 37.09201368747186), (-107.90092264057883, 40.80712641118421), (-108.5989590634666, 39.99415494346986), (-106.79151862928045, 40.18765867438944), (-105.34068547816183, 37.02452683876669), (-105.44748832319692, 40.89095556160096), (-108.8938876844086, 37.00806496324631)], [(-119.72599675275866, 39.61123381502914), (-117.00021617245254, 38.64440313697301), (-116.20300747376834, 40.12794549200719), (-114.87750604030093, 41.48552204007184), (-114.48804235083678, 39.595062979556), (-115.53945658963325, 36.62970768571741), (-119.36990433936501, 39.875683110436455), (-118.92341762324217, 38.72248347023628), (-116.84294421378564, 39.89951932030491), (-116.58123000997689, 39.9545093439339), (-116.63389520036326, 38.398742399419284), (-116.69432835815522, 37.28090096509983)], [(-103.55674477022029, 32.974035052545716), (-106.62518460595328, 34.893765131110634), (-108.77744081677628, 32.067510317857355), (-105.41001559033064, 36.869026436746076), (-107.14557620344509, 36.67557785717905), (-103.56870987779133, 36.899850517429904), (-107.59419627214828, 34.70169687309815), (-104.28664713734358, 35.198384095147034), (-108.01492681325134, 35.3415395369364), (-108.22920413992892, 36.73057428964258), (-109.04281613928043, 35.52309039817708), (-105.66642184230575, 34.383908921913346)], [(-122.81123109145202, 45.9190316472332), (-123.77736008201053, 42.22340985616314), (-123.8776899777775, 44.492813105419366), (-121.79210518120827, 43.04736868671219), (-122.88447417638143, 42.410451164448766), (-118.41703928714149, 45.21360504959966), (-123.21812122139744, 44.77248589636875), (-120.1230710267279, 44.14145187815727), (-124.00141853353024, 43.5349104545118), (-121.28937939430556, 42.00194045243891), (-122.53301640463611, 42.586571429176885), (-117.22044862901879, 44.97056528041863)], [(-111.93582984600755, 39.38226962971907), (-113.27142555594166, 41.91470949677778), (-112.41440647174727, 39.9580774325411), (-110.74593932100768, 38.55568520648415), (-109.8379042280013, 39.334390069944455), (-113.82298817659328, 41.61653646413189), (-110.78337034716819, 37.46317464047555), (-112.18356799875565, 40.393234893997175), (-110.91219187646408, 40.38945871183903), (-113.27626877314687, 40.4263468307905), (-111.50609272552131, 40.61394525795934), (-109.1264369282153, 40.45376677675834)], [(-108.43666974495854, 43.86830568010531), (-108.80818944958175, 42.19383689597873), (-107.98604577103143, 42.95986331575713), (-106.20709547371739, 43.878119938887096), (-105.83468128367751, 41.495949767759974), (-109.20279158842769, 41.00845767699566), (-104.48871154998612, 42.685915833562575), (-108.04096980057086, 43.03147237768473), (-106.20517458360197, 44.32488526250723), (-105.55054311757469, 41.087494503050905), (-106.84660738122656, 43.99986188388894), (-107.94478120006214, 44.78755787617398)], [(-92.73689644757937, 35.993681959086985), (-92.4760526182965, 34.057375279671206), (-92.35731666915747, 36.350025068869016), (-92.1270303464435, 33.43108921023706), (-93.1173869633425, 34.82133202481275), (-91.64879755253553, 35.011824793316514), (-91.92299349526883, 33.64577424316505), (-93.14848381405933, 35.47168776184562), (-92.84630219553388, 34.10291150182764), (-90.8269228023606, 34.55537463194704), (-94.34219232953758, 34.02708124559143), (-92.78743505345221, 34.44808058353937)], [(-97.86951635850367, 35.41142511962883), (-94.70277520926172, 35.93366286598173), (-95.8764960313988, 35.37838735669847), (-95.37991496745744, 34.26161001590226), (-97.80904566991255, 34.54174718705525), (-99.13274508590276, 35.220389694160716), (-98.13700633202414, 36.72607643574019), (-94.70819191019392, 34.77502141325422), (-98.24082982702372, 35.15339779414686), (-96.96532000426426, 33.919562559773546), (-98.30670798935449, 34.51230584342459), (-98.72485518977577, 36.97990438877924)], [(-91.55246665528736, 30.030936655246684), (-92.03607447479638, 32.05637843088975), (-91.58921067206163, 32.96138776786563), (-92.78201871641298, 31.561996226858987), (-92.68840386153077, 31.53916666497255), (-90.82169299540651, 30.46850486621047), (-92.49116917961257, 30.58407673712407), (-91.89644285216004, 31.550017394552434), (-90.91260176005454, 30.7747000838278), (-91.79005298253948, 31.729851842571726), (-90.67982107775703, 29.83275327903883), (-92.2896302598038, 31.510503342803386)], [(-106.21523077839255, 31.62384258937228), (-103.97894726083597, 30.8926318710651), (-98.48329833136894, 26.36860086731367), (-98.83759929197633, 27.620483065324976), (-96.60303760491922, 30.19600969617091), (-97.11291484136099, 33.10662182964049), (-98.75815263404436, 33.29133155391678), (-103.14151989095855, 29.909114571748386), (-100.76669463412568, 29.655893047791025), (-97.2266918004827, 33.73550195451707), (-94.3634017247457, 31.683798162098), (-97.33660913741036, 30.55999330622106)], [(-86.1118481181246, 30.998795039576475), (-86.62589055240102, 34.094471880611124), (-88.11456425880769, 32.80108208826343), (-87.6354479366342, 31.805687725591227), (-86.16273911010484, 31.273367333171024), (-85.24520549507905, 31.11069485969333), (-88.1093589490688, 32.46614056561137), (-85.18443419047269, 32.3150720894002), (-86.76428565154337, 34.07223703168365), (-85.92030881752336, 34.51845302010938), (-87.69467575207116, 32.2604812325195), (-87.71844766345772, 31.693008587848688)], [(-81.13137128618841, 26.8451717843465), (-85.513200830041, 30.771628666936476), (-81.87588649161754, 27.647483411938133), (-84.76687337557266, 30.569423824473926), (-85.27613201761623, 29.988598246787507), (-80.22920655196596, 26.427010918513), (-82.46143212005826, 28.013850130891072), (-80.32849672352079, 25.879708587792656), (-83.368904686905, 29.89536085021754), (-84.18252170662181, 30.66298759376908), (-83.80838736009102, 30.666996701502985), (-81.72151320750345, 29.778777133371573)], [(-83.60338896424913, 31.798494983405753), (-83.72026059532595, 32.246552388727714), (-85.27023602976787, 34.148500796949634), (-82.53050667320748, 31.495373308236328), (-83.53225085805134, 32.472362900251774), (-85.211457956262, 33.158202577940436), (-82.97979063415958, 31.980212541079474), (-83.86779367379995, 32.52325590306304), (-84.0204325726489, 32.19069875252943), (-84.6554083220435, 32.176834557027036), (-84.44083484726026, 34.642516692737345), (-85.08236861167158, 34.15600850506303)], [(-89.88943874495556, 33.08690592970269), (-88.67165516186851, 33.00592307112955), (-90.49920091647319, 33.79907519376141), (-89.13067963716358, 35.01695709177851), (-90.41917122498596, 33.55111279386951), (-89.53139011104328, 34.30131933281195), (-88.68912049497162, 31.24277230293685), (-90.37445812258682, 32.9382601874358), (-89.04854650366396, 31.0792893671505), (-89.35614527022648, 31.829991310562974), (-90.23925682064593, 33.0549838002492), (-88.77064827030237, 32.03683541277676)], [(-80.29670647836768, 32.82766934777425), (-79.84985103574735, 34.66306280044004), (-80.2355884918161, 33.782824253688844), (-80.39828941470424, 33.15758149878117), (-80.07757057110307, 34.490359404219156), (-82.46350922718214, 34.2959058944944), (-82.20708808277153, 34.809157301555096), (-80.73839736186338, 33.808584511848764), (-79.16341938859985, 34.03258979272112), (-80.45467196926325, 32.67886708868755), (-80.15805965995538, 34.51000960604614), (-80.97555249608456, 33.872267559124154)], [(-85.97530028448202, 37.51225487028668), (-83.28904861654884, 38.43257642275833), (-83.28839164380955, 38.0450095689021), (-84.48621687548588, 38.68118468268927), (-87.43456114772653, 37.71860424313805), (-84.10764871806948, 38.56336581183187), (-85.1532827558099, 37.439983507751755), (-82.80621233956278, 37.7956116192751), (-84.14164737181844, 36.7475817379377), (-84.28925154759702, 37.09960436875832), (-85.79522772135093, 37.75754191122413), (-84.44901049270956, 38.965752772171726)], [(-77.68874250966857, 35.538050561121246), (-77.75469382937025, 34.453739499066884), (-83.27901656688246, 35.370117105660036), (-78.34226671081994, 34.461421482754474), (-78.04082156413287, 35.08702023898304), (-79.3372027276211, 35.98538806401881), (-78.6098443629251, 33.979153012537544), (-76.92029746398232, 35.374684473578235), (-77.78981105042367, 35.66893800090211), (-77.65015098142264, 36.47548962466469), (-79.55632570716423, 35.016564855483225), (-79.61648857111726, 36.44825486714098)], [(-87.46523960709104, 35.23656331743427), (-85.14613021831019, 36.562645743567394), (-84.84485388518247, 35.650019321256394), (-83.90480509940343, 36.40969060433979), (-83.69362988422955, 36.34392247045591), (-86.32038814654325, 35.98017531743683), (-88.24467528599624, 35.260413662256575), (-85.41301940186031, 36.42870478653126), (-84.35076292249312, 35.728551921552544), (-83.24139167509448, 36.17812602559156), (-85.249141142388, 35.16310890844939), (-84.4173291078566, 35.56570510758047)], [(-76.931837874586, 37.999359606557185), (-78.99369310889398, 38.30285399922955), (-83.06736941569501, 36.81301958748429), (-77.68612428923979, 38.49767701961999), (-77.63047093290639, 38.97617549068816), (-77.3550826536325, 38.13566001400727), (-78.72277240855651, 36.56356723237018), (-79.14840482794553, 38.45957167446336), (-77.74499994995435, 36.6407791249922), (-82.3582851990855, 37.17618078142206), (-82.44559453791635, 37.06262028477747), (-78.35829121946726, 38.30179911196548)], [(-79.50927121671451, 39.216022943635735), (-79.96378890793852, 39.27759589887906), (-82.38341282362369, 38.159022120508844), (-81.6666676069932, 39.06599667843224), (-80.70691358083745, 37.40419287058309), (-78.54978887500923, 39.49186208544906), (-80.52624540807831, 38.28261331104826), (-79.70830698367948, 38.48541346161777), (-79.11953061219937, 39.42588741134408), (-81.13368753669029, 38.309742831080214), (-81.30856635517682, 38.205006749425074), (-80.77345150277718, 38.515505155769745)], [(-75.47605193471384, 38.79151740419329), (-75.46077252542399, 39.112419786101576), (-75.44931003291869, 38.852742517655486), (-75.60966741058871, 39.19287326135507), (-75.62796869454375, 38.7651151249291), (-75.11344088967378, 38.75029091452509), (-75.72186967727943, 39.75617867877282), (-75.7013697853865, 38.58984104801674), (-75.44604798909327, 38.66738921166747), (-75.37495748609007, 38.836753766063595), (-75.2901383460832, 38.889216974766896), (-75.63492879408483, 39.774053543840765)], [(-77.02392009184982, 38.92597470856985), (-77.01982782353663, 38.916266203715544), (-77.03633505249215, 38.96141941142204), (-76.9901584127747, 38.85667136640159), (-76.95092007526533, 38.90532584046948), (-76.97271544836431, 38.85831053000216), (-77.03608183492676, 38.79472555289854), (-76.98511357265706, 38.92227363120651), (-77.02271059542396, 38.925909911848805), (-77.03574138951092, 38.91971342926069), (-76.99198982910114, 38.8307725566963), (-77.03361860963581, 38.872325966568354)], [(-77.28347407581668, 39.471960190038416), (-77.33766112072564, 39.57007376461241), (-77.06996846682785, 39.40162563352216), (-77.24370226077349, 38.461108872090115), (-77.39447668567803, 39.70762191970451), (-76.05518055099405, 38.297632961679085), (-76.18710029880228, 38.72620017767871), (-76.99052587416067, 39.6124255049134), (-77.45122959184232, 39.3539448449184), (-78.77309282320984, 39.63240144063667), (-76.27991229131355, 39.26103146137332), (-75.73150756106337, 38.26690511658696)], [(-73.37852643503896, 41.79316797891633), (-71.96826765700101, 41.416519853996), (-72.66196190923041, 41.682803556877474), (-72.67185237365956, 41.54229918029546), (-72.93268860625521, 41.677504863097994), (-73.35980349025691, 41.456083009690694), (-72.29577615861284, 41.443606178357534), (-73.3511034331053, 41.496325710137725), (-72.82031137897145, 41.895158813166674), (-73.2990126525813, 41.426985130412746), (-72.45954352232863, 41.34481479848828), (-72.39325204387467, 41.79062240108687)], [(-71.39001229219168, 42.54307484951855), (-70.98333404186555, 41.87486417910009), (-71.26386297472958, 42.31232909363019), (-72.21834541312805, 42.28795594232729), (-70.915503934524, 42.04218813035875), (-71.75948302189593, 42.507422744580154), (-70.11042064221115, 41.702104030524715), (-71.32427424035163, 42.393260914238056), (-71.97509563076669, 42.12034488182961), (-71.91928025476487, 42.3802672765981), (-70.97202149029573, 42.84543967307671), (-71.13946541393635, 41.99523623960074)], [(-71.03751906053549, 43.04284133927792), (-71.995102786815, 44.04487411064664), (-71.35174575513412, 44.11932417038404), (-72.24379260682416, 42.77109306786579), (-71.69336177820645, 43.600063398047276), (-71.33720986230988, 44.878429757799765), (-71.04730278897333, 43.97821095616467), (-71.3664793435062, 43.316133951442964), (-71.27821433805431, 44.06034968739011), (-71.07203620786734, 42.97074191263791), (-71.48644754752081, 43.328705252044344), (-71.36263457169052, 45.08369585862118)], [(-71.54245305013643, 41.86332379169399), (-71.59423807742237, 41.875155669595586), (-71.60077232423474, 41.74010444600633), (-71.80063580916196, 41.339030255253824), (-71.64810560876778, 41.41363630637231), (-71.51362361622917, 41.91967523362095), (-71.51897097075187, 41.99493851442486), (-71.35670081192059, 41.73454402257415), (-71.64664484057447, 41.53326214089059), (-71.56936022188351, 41.41636749220888), (-71.44347787914045, 41.80720782236251), (-71.60978970524359, 41.5646903934002)], [(-71.62707876904534, 44.97375307477812), (-72.37509709254535, 44.886062326115244), (-72.76227663835878, 42.941943610794006), (-72.89805369448783, 43.88077773588137), (-72.8304294761614, 42.91003103814214), (-72.51598899666742, 44.87600175662064), (-72.90502507590558, 43.35987050927923), (-71.84186824050605, 44.37085176764498), (-72.35597023218908, 44.832880558159246), (-72.82773045242119, 44.74285342462572), (-72.66656093937493, 43.601206664362905), (-72.18391983963686, 44.900215941867486)], [(-74.62584601861884, 40.35980647603452), (-75.28593877275202, 39.321457911234134), (-74.43379405488939, 40.12735467813648), (-74.31044954503449, 40.82374279134293), (-73.99620640583497, 40.82788540579475), (-74.93613538803871, 40.73579025532162), (-75.2571397363022, 39.357867618116806), (-74.83374526306865, 39.51015438345548), (-74.82396675484918, 39.49351375523098), (-74.93403095168979, 40.949951263192574), (-75.36632672487589, 39.77247142641367), (-74.70936522888313, 41.17398470899445)], [(-74.17089050923109, 42.93661125224928), (-74.70958295769749, 43.41761390685566), (-76.06793457500619, 42.634577191434104), (-74.10948649363647, 41.89161974273628), (-77.49635080854328, 42.28045490800665), (-78.45201749251166, 42.09726792130076), (-74.47482949568706, 43.614796208866494), (-76.97258928994476, 42.92174619830594), (-78.4781489529535, 42.45897805213794), (-74.0864728799287, 44.87794383370422), (-78.60813441689587, 43.12880503557076), (-74.02367872206042, 42.70327316775082)], [(-78.43009557336742, 41.88844568182184), (-78.74682778449822, 40.375463564838874), (-76.27104727012083, 39.768172074674425), (-77.64025333179423, 41.84159746683988), (-75.79753383668283, 40.238014983666716), (-78.38467111600113, 40.16733578913061), (-75.97558508663563, 40.817975796484774), (-75.40394006092424, 41.190690881679046), (-75.78528628735953, 41.93205952521502), (-80.19175719640869, 40.50798027504384), (-79.78221871945414, 40.597042613425614), (-79.58302880892391, 39.814401982241485)], [(-68.39766378498098, 44.498676592243655), (-68.68882157641038, 46.17745712552319), (-70.13121261703539, 44.42808991946798), (-69.7681982800739, 45.495685626343324), (-69.77085507422991, 46.1886371910988), (-67.69102776604875, 44.72722348819127), (-69.71298629505898, 46.59168129997883), (-70.15213786373214, 44.502550732751445), (-68.31805890531275, 46.30571034645536), (-69.09363461094327, 46.405398747237165), (-69.63088482412776, 46.120137960530386), (-68.64801942945358, 47.16828642458693)]]
a = smallest_k_disc_fast(point_sets)
b = smallest_k_disc_fast_randomised(point_sets)

#print(a, b)
#print(round(a[1], 6) == round(b[1], 6))